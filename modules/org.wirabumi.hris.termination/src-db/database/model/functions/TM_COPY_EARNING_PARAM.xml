<?xml version="1.0"?>
  <database name="FUNCTION TM_COPY_EARNING_PARAM">
    <function name="TM_COPY_EARNING_PARAM" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[--generate product value list that have suspect of duplicity
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_result NUMBER:=1; -- 0=failure
  v_count integer:=0;
  v_Record_ID VARCHAR(32);
  v_AD_User_ID VARCHAR(32);
  v_Client_ID VARCHAR(32);
  v_Org_ID  VARCHAR(32);
  v_earning_id VARCHAR(60);

  
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur RECORD;
 
  BEGIN
   DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY

    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
    END LOOP; -- Get Parameter

    --function definition here
    select ad_client_id, ad_org_id into v_Client_ID, v_Org_ID 
    from tm_set_phk
    where tm_set_phk_id=v_Record_ID;
    
    --copy earning
    for Cur in (select * from pyr_earning_param
		where ad_client_id=v_Client_ID and isactive='Y' and em_tm_istermination='Y')
    loop
        select em_pyr_earning_param_id into v_earning_id 
        from tm_set_phk_detail
        where tm_set_phk_id=v_Record_ID
        and em_pyr_earning_param_id=cur.pyr_earning_param_id;


        IF v_earning_id=cur.pyr_earning_param_id then 
            update tm_set_phk_detail set em_pyr_earning_param_id=cur.pyr_earning_param_id
            where tm_set_phk_id=v_Record_ID
            and em_pyr_earning_param_id=cur.pyr_earning_param_id;
        else
	    INSERT INTO tm_set_phk_detail(
            tm_set_phk_detail_id, ad_client_id, tm_set_phk_id, ad_org_id, 
            isactive, created, createdby, updated, updatedby, em_pyr_earning_param_id, 
            multiplier)
	    VALUES (get_uuid(), v_Client_ID, v_Record_ID, v_Org_ID, 
		    'Y', now(), v_AD_User_ID, now(), v_AD_User_ID, cur.pyr_earning_param_id, 
		    Cur.param_amount);
	End If;
    end loop;

    IF(p_PInstance_ID IS NOT NULL) THEN
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
END TM_COPY_EARNING_PARAM
]]></body>
    </function>
  </database>
