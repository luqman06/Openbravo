<?xml version="1.0"?>
  <database name="FUNCTION OT_CALCULATE_OVERTIME1">
    <function name="OT_CALCULATE_OVERTIME1" type="NULL">
      <parameter name="p_employee_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="result" type="NUMERIC" mode="out">
        <default/>
      </parameter>
      <body><![CDATA[--lembur pagi
v_checkin timestamp without time zone;
v_checkout timestamp without time zone;
v_checkinactual timestamp without time zone;
v_checkoutactual timestamp without time zone;
v_datefrom timestamp without time zone; 
v_dateto timestamp without time zone;
v_ot_checkin NUMBER;
v_ot_checkout NUMBER;
--umum
v_startdate timestamp without time zone;
v_enddate timestamp without time zone;
v_libur character;
v_att_Checkin NUMBER;
v_day NUMBER;
v_count NUMBER;
v_count1 NUMBER;
v_set_tarif NUMBER;
v_overtime_id character varying(32);
v_overtime_detail_id character varying(32);
v_jam NUMBER;
v_batas_bawah NUMBER;
v_batas_bawah_sebelum NUMBER;
v_multiplier NUMBER;
v_lembur NUMBER;
v_lembur1 NUMBER;
v_tarif NUMBER;
v_tot_jamkerja NUMBER;
v_total NUMBER;
v_jam2 NUMBER;
v_amount NUMBER;
v_gajipokok NUMBER;
v_tunjangantetap NUMBER;
v_set_overtime_id varchar(32);
v_shift_id varchar(32);
v_shiftline_id varchar(32);
v_tot_duration NUMBER;
v_client_id varchar(32);
v_org_id varchar(32);
v_createdby varchar(32);
v_updatedby varchar(32);
v_position varchar(32);
v_bpartner_id varchar(32);
v_salarypayment_id varchar(32);
v_shiftline bigint;
cur_employee Record;
Cur_Attendance Record;

BEGIN 
result:=0;
alter table ot_overtime disable trigger ot_updateduration;
BEGIN
for cur_employee in 
(select startdate::date as startdate, enddate::date as enddate, bp.em_hris_position, spe.c_bpartner_id, 
pyr_sp_employee_id, bp.ad_client_id, bp.ad_org_id, sp.pyr_salarypayment_id, bp.em_hris_position as position
from pyr_salarypayment sp
inner join pyr_sp_employee spe on spe.pyr_salarypayment_id=sp.pyr_salarypayment_id
inner join c_bpartner bp on bp.c_bpartner_id=spe.c_bpartner_id
where startdate::date<=now()::date
and enddate::date>=now()::date
and exists (select 1 from pyr_spe_earning spee 
inner join pyr_earning pe on pe.pyr_earning_id=spee.pyr_earning_id
where pe.value='TLB' and spee.pyr_sp_employee_id=spe.pyr_sp_employee_id)
and (case when p_employee_id is not null then spe.c_bpartner_id=p_employee_id else 1=1 end))

Loop
raise notice 'c_bpartner_id: %, startdate: %, enddate: %', 
cur_employee.c_bpartner_id, cur_employee.startdate, cur_employee.enddate; 

    FOR Cur_Attendance in  (select t_date as DATE, employee_id, keterangan, checkin, checkout, checkinactual, checkoutactual,
		  (extract(hour from checkin)*60 + extract(minute from checkin))/60 as att_checkout
		  from ta_indv_attendanceperformance(cur_employee.c_bpartner_id, cur_employee.startdate, cur_employee.enddate))
    Loop

	if Cur_Attendance.checkinactual is null or Cur_Attendance.checkoutactual is null then continue; end if;
	
	--mengambil data checkin yang paling awal
	select checkin, (extract(hour from checkin)*60 + extract(minute from checkin))/60 
	into v_checkinactual, v_att_Checkin
	from ta_attendance
	where c_bpartner_id=Cur_Attendance.employee_id
	and checkin::date=Cur_Attendance.date 
	order by checkin asc limit 1;

	--mengambil data checkout yang paling Akhir
	select checkout into v_checkoutactual
	from ta_attendance
	where c_bpartner_id=Cur_Attendance.employee_id
	and checkin::date=Cur_Attendance.date
	and (case when Cur_Attendance.checkout is not null then checkin::time<=Cur_Attendance.checkout::time else 1=1 end)
	order by checkout desc limit 1;

	raise notice '%, checkin: %, checkinactual: %, checkout: %, checkoutactual: %',
	Cur_Attendance.date, Cur_Attendance.checkin, v_checkinactual, Cur_Attendance.checkout, v_checkoutactual;
	
	
        IF Cur_Attendance.keterangan is not null then v_libur='Y'; else v_libur='N'; End If;
        
        IF v_libur='N' then
	   IF v_checkinactual::time<=Cur_Attendance.checkin::time then
		select ot_overtime_id, checkin, checkout, c_bpartner_id, datefrom, dateto,
		((extract(hour from checkin)*60 + extract(minute from checkin))/60)::numeric,
		((extract(hour from checkout)*60 + extract(minute from checkout))/60)::numeric, 
		ad_client_id, ad_org_id, createdby, updatedby 
		into v_overtime_id, v_checkin, v_checkout, v_bpartner_id, v_datefrom, v_dateto,  
		v_ot_checkin, v_ot_checkout, v_client_id, v_org_id, v_createdby, v_updatedby
		from ot_overtime
		where checkin::time>=v_checkinactual::time
		and checkout::time<=Cur_Attendance.checkin::time
		and datefrom=Cur_Attendance.date
		and docstatus='CO'
		and status='OT';
	   End If;
	End If;

	

	--tambahi jika overtime minta 2 jam, di attendance 1 jam, maka yang di pakai 1 jam
	--tambahi jika overtime minta 2 jam, di attendance 3 jam, maka yang di pakai 2 jam
        IF v_libur='N' then       
	   IF Cur_Attendance.att_checkout>=v_ot_checkout and v_att_Checkin>v_ot_checkin
		then v_tot_duration:=v_ot_checkout-v_att_Checkin;
	   ELSEIF Cur_Attendance.att_checkout<v_ot_checkout and v_att_Checkin>v_ot_checkin  
		then v_tot_duration:=Cur_Attendance.att_checkout-v_att_Checkin;	
	   ELSEIF Cur_Attendance.att_checkout>=v_ot_checkout and v_att_Checkin<=v_ot_checkin 
		then v_tot_duration:=v_ot_checkout-v_ot_checkin;	
	   ELSEIF Cur_Attendance.att_checkout<v_ot_checkout and v_att_Checkin<=v_ot_checkin 
		then v_tot_duration:=Cur_Attendance.att_checkout-v_ot_checkin;
	   End if;
        End IF;

        --debug
	IF v_tot_duration < 0 then continue; end if;
	
	--menentukan shift
	--mencari hari libur berdasarkan shift
        select ta_shift_id into v_shift_id
        from ta_c_bp_shift
        where c_bpartner_id=cur_employee.c_bpartner_id
        and v_datefrom::date>=validfrom::date
        and v_dateto::date<=validto::date;

        IF v_shift_id is null then continue;        
        END IF;
	raise notice 'v_libur: %', v_libur;

	--mendapatkan tarif lembur
	--mendapatkan gaji pokok
	select spee.amount into v_gajipokok
	from pyr_spe_earning spee
	inner join pyr_sp_employee spe on spe.pyr_sp_employee_id=spee.pyr_sp_employee_id
	inner join pyr_earning pe on pe.pyr_earning_id=spee.pyr_earning_id
	where spe.c_bpartner_id=cur_employee.c_bpartner_id
	and pe.value='GP'
	and spe.pyr_salarypayment_id=cur_employee.pyr_salarypayment_id;
	
	--mendapatkan Tunjangan Tetap
	select spee.amount into v_tunjangantetap
	from pyr_spe_earning spee
	inner join pyr_sp_employee spe on spe.pyr_sp_employee_id=spee.pyr_sp_employee_id
	inner join pyr_earning pe on pe.pyr_earning_id=spee.pyr_earning_id
	where spe.c_bpartner_id=cur_employee.c_bpartner_id
	and pe.value='TP'
	and spe.pyr_salarypayment_id=cur_employee.pyr_salarypayment_id;

	--mendapatkan position pada set overtime
	select position into v_position
	from ot_set_overtime
	where ad_client_id=cur_employee.ad_client_id
	and position=cur_employee.position
	order by validfrom desc, validto desc limit 1;

	raise notice 'v_position: %', v_position;
	
	IF v_position is not null then
	   --mendapatkan overtime set up
	   select ot_set_overtime_id, tot_jamkerja, tarif into  v_set_overtime_id, v_tot_jamkerja, v_set_tarif
	   from ot_set_overtime
	   where ad_client_id=cur_employee.ad_client_id
	   and position=v_position
	   order by validfrom desc, validto desc limit 1;
	Else
	   --mendapatkan overtime set up
	   select ot_set_overtime_id, tot_jamkerja, tarif into  v_set_overtime_id, v_tot_jamkerja, v_set_tarif
	   from ot_set_overtime
	   where ad_client_id=cur_employee.ad_client_id
	   order by validfrom desc, validto desc limit 1;
	End IF;
	   

	raise notice 'v_tot_jamkerja: %, v_set_tarif: %', v_tot_jamkerja, v_set_tarif;

	--penentuan tarif lembur
	if v_set_tarif is not null then
	v_tarif:=v_set_tarif;
	Else
	v_tarif:=round((v_gajipokok+v_tunjangantetap)/v_tot_jamkerja, 2);
	End IF;
	raise notice 'v_tarif: %', v_tarif;
	

	--penentuan gaji
	v_jam:=v_tot_duration;  v_jam2:=v_tot_duration; v_lembur:=0; v_batas_bawah_sebelum:=0;
	--menentukan tarif bawah
	IF v_libur='N' then
	select max_hour, multiplier into v_batas_bawah, v_multiplier
	from ot_business_rate where  ot_set_overtime_id=v_set_overtime_id 
	order by max_hour asc limit 1;
	End If;

	
	--loop menentukan lembur
	while (v_jam >= (v_batas_bawah-v_batas_bawah_sebelum))
	Loop  
	v_lembur:= v_lembur + (v_multiplier * v_tarif * (v_batas_bawah-v_batas_bawah_sebelum));
	v_batas_bawah_sebelum:= v_batas_bawah;

	raise notice 'v_date1: %, v_employee1: %, v_multiplier1: %, v_lembur1: %, v_jam1: %', 
	Cur_Attendance.date, (select name from c_bpartner where c_bpartner_id=cur_employee.c_bpartner_id),
	v_multiplier, v_lembur, v_jam;	
	
	IF v_libur='N' then
	  select max_hour, multiplier into v_batas_bawah, v_multiplier 
			  from ot_business_rate
			  where  ot_set_overtime_id=v_set_overtime_id  
	                  and max_hour > v_batas_bawah_sebelum 
	                  order by max_hour asc limit 1;
	End If;        
        v_jam:=v_jam-(v_batas_bawah-v_batas_bawah_sebelum);        
        
        raise notice 'v_date2: %, v_employee2: %, v_multiplier2: %, v_lembur2: %, v_jam2: %', 
	Cur_Attendance.date, (select name from c_bpartner where c_bpartner_id=cur_employee.c_bpartner_id),
	v_multiplier, v_lembur, v_jam;
	       
	End Loop; --End loop menentukan lembur
	v_jam:=v_jam2-v_batas_bawah_sebelum;
	v_lembur =v_lembur+(v_multiplier * v_tarif * (v_jam));
	
	v_amount:=round(v_lembur, 2);

	raise notice 'v_date3: %, v_employee3: %, v_multiplier3: %, v_lembur3: %, v_jam3: %', 
	Cur_Attendance.date, (select name from c_bpartner where c_bpartner_id=cur_employee.c_bpartner_id),
	v_multiplier, v_lembur, v_jam;
	
	raise notice 'v_amount: %', v_amount;

	--update amount di window overtime
	IF v_libur='N' then
	   IF v_amount>0 then
		update ot_overtime set updated=now(), amount=v_amount, calculate='Y'
		where c_bpartner_id=cur_employee.c_bpartner_id
		and ad_client_id=cur_employee.ad_client_id
		and checkin::time>=v_checkinactual::time
		and checkout::time<=Cur_Attendance.checkin::time
		and datefrom=Cur_Attendance.date
		and docstatus='CO'
		and status='OT';
	   End IF;
	End IF;


	--mengambil amount dari window overtime yang calculate Y
	select (sum(case when amount is not null then amount end)) into v_total
	from ot_overtime
	where c_bpartner_id=v_bpartner_id
	and ad_client_id=cur_employee.ad_client_id
	and calculate='Y'
	and datefrom::date>=cur_employee.startdate::date
	and dateto::date<=cur_employee.enddate::date
	and docstatus='CO';


	raise notice 'v_total: %', v_total;
	--raise notice 'v_total: %', v_total;
	--update lembur di salary payment
	IF v_total is not null then
	   update pyr_spe_earning set updated=now(), amount=v_total
	   where pyr_earning_id=(select pyr_earning_id from pyr_earning where value='TLB' and ad_client_id=cur_employee.ad_client_id)
	   and ad_client_id=cur_employee.ad_client_id
	   and pyr_sp_employee_id=cur_employee.pyr_sp_employee_id;
	else continue;
	end if;
    End Loop;
End Loop;

result:=1;
alter table ot_overtime enable trigger ot_updateduration; 
RETURN;
END;
END OT_CALCULATE_OVERTIME1
]]></body>
    </function>
  </database>
