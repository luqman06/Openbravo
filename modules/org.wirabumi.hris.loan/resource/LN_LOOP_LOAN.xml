<?xml version="1.0"?>
  <database name="FUNCTION LN_LOOP_LOAN">
    <function name="LN_LOOP_LOAN" type="NULL">
      <parameter name="p_employee_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_effectivedate" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="result" type="NUMERIC" mode="out">
        <default/>
      </parameter>
      <body><![CDATA[declare
v_startdate timestamp without time zone;
v_enddate timestamp without time zone;
v_startdate_month timestamp without time zone;
v_dateacct_month timestamp without time zone;
v_startdate_year NUMBER;
v_dateacct_year NUMBER;
v_enddatelns timestamp without time zone;
v_enddatelns2 timestamp without time zone;
v_enddateln timestamp without time zone;
v_count NUMBER;
v_month integer;
v_payments NUMBER;
v_outstanding NUMBER;
v_totalbayar NUMBER;
v_totalhutang NUMBER;
v_cicilan NUMBER;
v_year NUMBER;
v_installments NUMBER;
v_amount NUMBER;
v_duration NUMBER;
v_amountln NUMBER;
v_amountlns NUMBER;
v_utang NUMBER;
v_bpartner_id varchar(32);
v_datefrom timestamp without time zone;
v_dateto timestamp without time zone;
v_dateacct timestamp without time zone;
v_totalpaid NUMBER;
v_interest NUMBER;
v_totalinterest NUMBER;
v_ln_amount NUMBER;
v_ispaid character;
v_test varchar(32);
cur_salary record;

begin
 result:=0;
 v_totalbayar:=0;

 --memberikan parameter berupa tahun dan bulan
 if p_effectivedate is null then
   select date_part('year', now()), date_part('month', now()) into v_year, v_month
   from dual;
 else
   v_year:=date_part('year',p_effectivedate);
   v_month:=date_part('month', p_effectivedate);
 end if;


--loop employee
for cur_salary in 
(select c_bpartner_id, pyr_sp_employee_id, sp.ad_client_id, 
date_part('month', sp.valutadate)::numeric as valutadate_month, 
date_part('year', sp.valutadate)::numeric as valutadate_year,
sp.valutadate::date as effectivedate
from pyr_salarypayment sp
inner join pyr_sp_employee spe on spe.pyr_salarypayment_id=sp.pyr_salarypayment_id
where date_part('year',sp.valutadate)=v_year
and date_part('month',sp.valutadate)=v_month
and exists (select 1 from pyr_spe_deduction spee 
inner join pyr_deduction pe on pe.pyr_deduction_id=spee.pyr_deduction_id
where pe.value='PCP' and spee.pyr_sp_employee_id=spe.pyr_sp_employee_id)
and (case when p_employee_id is not null then spe.c_bpartner_id=p_employee_id else 1=1 end))

loop  --loop ln_loop_loan

--mengambil data loan pending
select c_bpartner_id, datefrom, date_part('month', datefrom),
dateacct, date_part('month', dateacct)
into v_bpartner_id, v_startdate_month, v_startdate_year, v_dateacct_month, v_dateacct_year
from ln_loanstatement 
where docstatus='CO'
and  c_bpartner_id=cur_salary.c_bpartner_id
and (case when dateacct is not null then cur_salary.effectivedate::date>=dateacct::date
else cur_salary.effectivedate::date>=datefrom::date end) 
and cur_salary.effectivedate::date<=dateto::date
order by datefrom desc, dateto desc, dateacct desc limit 1;

raise notice 'v_bpartner_id: %,  v_startdate_month: %, v_startdate_year: %, 
v_dateacct_month: %, v_dateacct_year: %', 
v_bpartner_id, v_startdate_month, v_startdate_year, v_dateacct_month, v_dateacct_year;


IF  v_bpartner_id=cur_salary.c_bpartner_id  and cur_salary.effectivedate > v_dateacct_month
and cur_salary.effectivedate < v_startdate_month
then continue; End IF; 

--mengambil data dari loan pending dan loan request
IF v_bpartner_id is not null then
   select lns.amount, round((ln.amount+ln.interest)/duration, 2), round(ln.amount+ln.interest, 2), 
   ln.datefrom, lns.dateto, ln.dateto, lns.dateacct
   into v_amountlns, v_amountln, v_totalhutang, v_startdate, v_enddatelns, v_enddateln, v_dateacct
   from ln_loanstatement lns
   inner join ln_loan ln on ln.ln_loan_id=lns.ln_loan_id
   where lns.docstatus='CO'
   and lns.c_bpartner_id=cur_salary.c_bpartner_id
   and (case when lns.dateacct is not null then cur_salary.effectivedate::date>=lns.dateacct::date
   else cur_salary.effectivedate::date>=lns.datefrom::date end) 
   and cur_salary.effectivedate::date<=lns.dateto::date
   order by lns.datefrom desc, lns.dateto desc limit 1;

   raise notice 'v_startdate: %, v_enddatelns: %', v_startdate, v_enddatelns;

   
   --menghitung banyak loan statement
   select count(*) into v_count
   from ln_loanstatement lns
   inner join ln_loan ln on ln.ln_loan_id=lns.ln_loan_id
   where lns.docstatus='CO'
   and lns.c_bpartner_id=cur_salary.c_bpartner_id;   
   
   --validasi untuk mendapatkan startdate, enddate, dan total hutang
   IF v_amountlns is not null then v_payments:=v_amountlns;
   else v_payments:=v_amountln;
   End IF;

	IF v_dateacct is not null  and v_count<=1 then  v_enddateln:=v_dateacct; 
	Elsif v_dateacct is not null and v_count>1 then  v_enddatelns2:=v_dateacct; 
	else v_enddateln:=v_enddateln;
	end if;

	--raise notice 'v_count: %, v_dateacct: %, v_enddateln: %, v_enddatelns2: %', 
	--v_count, v_dateacct, v_enddateln, v_enddatelns2;
	
	if v_enddatelns>=v_enddateln then v_enddate:=v_enddatelns;
	--elsif v_enddatelns<v_enddatelns2 and v_count>1 then v_enddate:=v_enddatelns2;
	Else v_enddate:=v_enddateln;
	End IF;

	--raise notice 'v_enddate: %', v_enddate;
	
Else
    --mengambil data yang ada di pinjaman
    select amount, interest, duration, datefrom, dateto
    into v_ln_amount, v_interest, v_duration, v_startdate, v_enddate
    from ln_loan
    where c_bpartner_id=cur_salary.c_bpartner_id
    and docstatus='CO'
    and datefrom<=cur_salary.effectivedate
    and dateto>=cur_salary.effectivedate
    and ispaid='N';

    --menghitung pinjaman sesuai dengan data yang ada di loan
    v_totalinterest:=round(v_ln_amount*v_interest/100, 2);
    v_payments:=round((v_ln_amount+v_totalinterest)/v_duration, 2);
    v_totalhutang:=round(v_totalinterest+v_ln_amount, 2);
END IF;
  
   IF v_payments is null or v_totalhutang is null or v_startdate is null or v_enddate is null then continue; end if;
   
   raise notice 'v_payments: %, v_startdate: %, v_enddate: %', 
   v_payments, v_startdate, v_enddate;
 

--mengambil data yang ada di salary payment
select sum(sped.amount) into v_amount
from pyr_spe_deduction sped
inner join pyr_deduction ded on ded.pyr_deduction_id=sped.pyr_deduction_id
inner join pyr_sp_employee spe on spe.pyr_sp_employee_id=sped.pyr_sp_employee_id
inner join pyr_salarypayment sp on sp.pyr_salarypayment_id=spe.pyr_salarypayment_id
where c_bpartner_id=cur_salary.c_bpartner_id
and sped.ad_client_id=cur_salary.ad_client_id
and ded.value='PCP'
and sp.valutadate>=v_startdate
and sp.valutadate<=v_enddate; 


select count(sped.amount) into v_installments
from pyr_spe_deduction sped
inner join pyr_deduction ded on ded.pyr_deduction_id=sped.pyr_deduction_id
inner join pyr_sp_employee spe on spe.pyr_sp_employee_id=sped.pyr_sp_employee_id
inner join pyr_salarypayment sp on sp.pyr_salarypayment_id=spe.pyr_salarypayment_id
where c_bpartner_id=cur_salary.c_bpartner_id
and sped.ad_client_id=cur_salary.ad_client_id
and ded.value='PCP'
and sp.valutadate>=v_startdate
and sp.valutadate<=v_enddate
and sped.amount>0;

raise notice 'v_installments: %', v_installments;

--mengambil data tagihan yang sudah dibayar di loan
select totalpaid, amount, outstandingamt, ispaid
into v_totalbayar, v_utang, v_outstanding, v_ispaid
from ln_loan
where c_bpartner_id=cur_salary.c_bpartner_id
and ad_client_id=cur_salary.ad_client_id
and datefrom>=v_startdate
and dateto<=v_enddate;

--mengambil data cicilan pada salary payment
select amount into v_cicilan
from pyr_spe_deduction
where pyr_deduction_id=(select pyr_deduction_id from pyr_deduction where value='PCP' and ad_client_id=cur_salary.ad_client_id)
and ad_client_id=cur_salary.ad_client_id
and pyr_sp_employee_id=cur_salary.pyr_sp_employee_id;

raise notice 'v_startdate: %, v_enddate: %, v_amount: %', v_startdate, v_enddate, v_amount;


--validasi untuk pembayaran
IF v_totalbayar >= v_totalhutang 
   then update ln_loan set ispaid='Y', outstandingamt=0
   where c_bpartner_id=cur_salary.c_bpartner_id
   and ad_client_id=cur_salary.ad_client_id
   and datefrom>=v_startdate
   and dateto<=v_enddate;
End If;

--validasi kalau sudah selesai dibayar
IF v_ispaid='Y'
then continue; end if;

--update amount pada salary payment
IF v_totalbayar+v_payments<=v_totalhutang then
  IF v_amount=v_totalbayar and v_cicilan<>0 then continue;
  Else
     update pyr_spe_deduction set updated=now(), amount=v_payments
     where pyr_deduction_id=(select pyr_deduction_id from pyr_deduction where value='PCP' and ad_client_id=cur_salary.ad_client_id)
     and ad_client_id=cur_salary.ad_client_id
     and pyr_sp_employee_id=cur_salary.pyr_sp_employee_id;
  ENd IF;
Else
  IF v_amount=v_totalbayar and v_cicilan<>0 then continue;
  Else
     update pyr_spe_deduction set updated=now(), amount=v_totalhutang-v_totalbayar
     where pyr_deduction_id=(select pyr_deduction_id from pyr_deduction where value='PCP' and ad_client_id=cur_salary.ad_client_id)
     and ad_client_id=cur_salary.ad_client_id
     and pyr_sp_employee_id=cur_salary.pyr_sp_employee_id;
  End IF;
End If;

raise notice 'v_amount: %, v_outstanding: %', v_amount, v_totalhutang-v_amount;

--update total paid yang ada di window loan
update ln_loan set updated=now(), totalpaid=v_amount, 
outstandingamt=v_totalhutang-v_amount, installments=v_installments
where c_bpartner_id=cur_salary.c_bpartner_id
and ad_client_id=cur_salary.ad_client_id
and datefrom>=v_startdate
and dateto<=v_enddate;

end loop; --loop ln_loop_loan

result:=1;

return;
end
]]></body>
    </function>
  </database>
