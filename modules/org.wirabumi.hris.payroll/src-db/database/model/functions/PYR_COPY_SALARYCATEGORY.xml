<?xml version="1.0"?>
  <database name="FUNCTION PYR_COPY_SALARYCATEGORY">
    <function name="PYR_COPY_SALARYCATEGORY" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[--generate product value list that have suspect of duplicity
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_result NUMBER:=1; -- 0=failure
  v_count integer:=0;
  v_Record_ID VARCHAR(32);
  v_AD_User_ID VARCHAR(32);
  v_Client_ID VARCHAR(32);
  v_Org_ID  VARCHAR(32);
  v_salarycategory_id VARCHAR(32);
  v_bpartner_id VARCHAR(32);
  v_currency_id VARCHAR(32);

  
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur RECORD;
 
  BEGIN
   DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY

    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      if Cur_Parameter.ParameterName='c_currency_id' then v_currency_id:=Cur_Parameter.P_String; end if;
    END LOOP; -- Get Parameter

    --function definition here
    select c_salary_category_id, c_bpartner_id, ad_client_id, ad_org_id
    into v_salarycategory_id, v_bpartner_id, v_Client_ID, v_Org_ID
	from c_bp_salcategory
	where c_bp_salcategory_id= v_Record_ID;


    --copy earning
    v_count:=0;
    for Cur in (select * from pyr_earning
		where ad_client_id=v_Client_ID and isactive='Y'
		and c_currency_id=v_currency_id)
    loop
	INSERT INTO pyr_bp_earning(
            pyr_bp_earning_id, ad_client_id, ad_org_id, 
            isactive,amount, created, createdby, updated, updatedby, 
            c_bp_salcategory_id, pyr_earning_id, seqno)
	    VALUES (get_uuid(), v_Client_ID, v_Org_ID, 
		    'Y',Cur.amount, now(), v_AD_User_ID, now(), v_AD_User_ID, 
		    v_Record_ID,cur.pyr_earning_id, cur.seqno);
	if FOUND then v_count:=v_count+1; end if;
    end loop;
    v_Message:=v_count||' earning(s) created<br>';

    --copy deduction
    v_count:=0;
    for Cur in (select * from pyr_deduction
		where ad_client_id=v_Client_ID and isactive='Y'
		and c_currency_id=v_currency_id)
    loop
	INSERT INTO pyr_bp_deduction(
            pyr_bp_deduction_id, ad_client_id, ad_org_id,
            isactive, amount, created, createdby, updated, updatedby, 
            c_bp_salcategory_id, pyr_deduction_id, seqno)
	    VALUES (get_uuid(), v_Client_ID, v_Org_ID,
		    'Y', Cur.amount, now(), v_AD_User_ID, now(), v_AD_User_ID, 
		    v_Record_ID, cur.pyr_deduction_id, cur.seqno);
	if FOUND then v_count:=v_count+1; end if;
    end loop;
    v_Message:=coalesce(v_Message,'')||v_count||' deduction(s) created';

    IF(p_PInstance_ID IS NOT NULL) THEN
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
END PYR_COPY_SALARYCATEGORY
]]></body>
    </function>
  </database>
