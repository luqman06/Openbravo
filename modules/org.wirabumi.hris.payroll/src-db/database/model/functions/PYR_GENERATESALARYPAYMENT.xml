<?xml version="1.0"?>
  <database name="FUNCTION PYR_GENERATESALARYPAYMENT">
    <function name="PYR_GENERATESALARYPAYMENT" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_result NUMBER:=1; -- 0=failure
  v_count integer:=0;
  v_Record_ID VARCHAR(32);
  v_payment_id VARCHAR(32);
  v_AD_User_ID VARCHAR(32);
  v_Client_ID VARCHAR(32);
  v_Org_ID VARCHAR(32);
  v_bp_salcategory_id VARCHAR(32);
  v_bpartner_id VARCHAR(32);
  v_payrollmaster_id VARCHAR(32);
  v_currency_id VARCHAR(32);
  v_startdate timestamp without time zone;
  v_enddate timestamp without time zone;
  v_effectivedate timestamp without time zone;
  v_pyr_sp_employee VARCHAR(32);
  v_type varchar(60);
  v_ismonthly character(1);

  
  --  Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_Employee RECORD;
    Cur_Earning RECORD;
    Cur_Deduction RECORD;
    
 
  BEGIN
   DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY

    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date, p.ad_client_id, p.ad_org_id
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      IF(Cur_Parameter.ParameterName='Employementtype') THEN
         v_type:=Cur_Parameter.P_String;
         DBMS_OUTPUT.PUT_LINE('  Type=' || v_type) ;
      END IF;
    END LOOP; -- Get Parameter

    --get client and org
    select ad_client_id, ad_org_id, c_currency_id into v_Client_ID, v_Org_ID, v_currency_id
    from pyr_salarypayment where pyr_salarypayment_id=v_Record_ID;

    --function definition here
    select startdate, enddate, valutadate, ismonthly, payrollmaster_id
    into v_startdate, v_enddate, v_effectivedate, v_ismonthly, v_payrollmaster_id
    from pyr_salarypayment where pyr_salarypayment_id=v_Record_ID;

    --raise exception 'v_type: %', v_type;
    --Menghapus employee ada pada salary payment
    delete from pyr_sp_employee where pyr_salarypayment_id=v_Record_ID;

    --loop for all employee
    v_count:=0;
    --raise exception 'v_payrollmaster_id: %, v_effectivedate: %, v_currency_id: %', v_payrollmaster_id, v_effectivedate,v_currency_id;
    for Cur_Employee in 
	(select c_bpartner.c_bpartner_id as c_bpartner_id
	from c_bpartner
	left join c_bp_salcategory on c_bp_salcategory.c_bpartner_id=c_bpartner.c_bpartner_id
	where c_bpartner.isemployee='Y' 
	and c_bpartner.isactive='Y'
	and c_bpartner.em_pyr_payrollmaster_id=v_payrollmaster_id
	and exists (select 1 from c_bp_salcategory
					where c_bpartner_id=c_bpartner.c_bpartner_id
					and datefrom <= v_effectivedate)
	and (exists (select 1 from pyr_bp_earning pbe
			inner join pyr_earning e on e.pyr_earning_id=pbe.pyr_earning_id
			where pbe.c_bp_salcategory_id=c_bp_salcategory.c_bp_salcategory_id
			and e.c_currency_id=v_currency_id)
	     or exists (select 1 from pyr_bp_deduction pbd
			inner join pyr_deduction d on d.pyr_deduction_id=pbd.pyr_deduction_id
			where pbd.c_bp_salcategory_id=c_bp_salcategory.c_bp_salcategory_id
			and d.c_currency_id=v_currency_id))
	group by c_bpartner.c_bpartner_id)
    loop

       --get 1 record of salary category
	select c_bp_salcategory_id into v_bp_salcategory_id
	from c_bp_salcategory
	where c_bpartner_id=Cur_Employee.c_bpartner_id
	and ad_client_id=v_Client_ID
	and datefrom  <=  v_effectivedate
	order by datefrom desc limit 1;

        --insert SP_Employee
        select get_uuid() into v_pyr_sp_employee from dual;
	
	INSERT INTO pyr_sp_employee(
            pyr_sp_employee_id, ad_client_id, ad_org_id, c_bpartner_id, description, 
            isactive, created, createdby, updated, updatedby, pyr_salarypayment_id)
	VALUES (v_pyr_sp_employee, v_Client_ID, v_Org_ID, Cur_Employee.c_bpartner_id, null, 
	   'Y', now(), v_AD_User_ID, now(), v_AD_User_ID, v_Record_ID);
	if FOUND then v_count:=v_count+1; end if;

	--loop for earning
	for Cur_Earning in (select pe.pyr_earning_id, pe.name, pe.value, pe.account_id, bpe.amount, bpe.seqno 
			    from pyr_earning pe
			    Inner Join pyr_bp_earning bpe on bpe.pyr_earning_id=pe.pyr_earning_id
			    where pe.ad_client_id=v_Client_ID 
			    and bpe.c_bp_salcategory_id=v_bp_salcategory_id
			    and bpe.isactive='Y'
			    and pe.isactive='Y'
			    and pe.c_currency_id=v_currency_id)

	loop

	  INSERT INTO pyr_spe_earning(
            pyr_spe_earning_id, ad_client_id, ad_org_id, isactive, amount,
            created, createdby, updated, updatedby, pyr_sp_employee_id, pyr_earning_id, seqno)
	    VALUES (get_uuid(), v_Client_ID, v_Org_ID, 'Y', Cur_Earning.amount, 
	    now(), v_AD_User_ID, now(), v_AD_User_ID, v_pyr_sp_employee, Cur_Earning.pyr_earning_id, Cur_Earning.seqno);

	end loop;

	--loop for deduction
	for Cur_Deduction in (select ded.pyr_deduction_id, ded.name, ded.value, ded.account_id, bpd.amount, bpd.seqno
				from pyr_deduction ded
				Inner Join pyr_bp_deduction bpd on bpd.pyr_deduction_id=ded.pyr_deduction_id
				where ded.ad_client_id=v_Client_ID 
				and bpd.c_bp_salcategory_id=v_bp_salcategory_id
				and bpd.isactive='Y'
				and ded.isactive='Y'
				AND (case when v_ismonthly='Y' then ded.ismonthly='Y' else 1=0 end)
				and ded.c_currency_id=v_currency_id)
	loop
	  INSERT INTO pyr_spe_deduction(
            pyr_spe_deduction_id, ad_client_id, ad_org_id, isactive, amount, 
            created, createdby, updated, updatedby, pyr_sp_employee_id, pyr_deduction_id, seqno)
	    VALUES (get_uuid(), v_Client_ID, v_Org_ID, 'Y', Cur_Deduction.amount, 
		    now(), v_AD_User_ID, now(), v_AD_User_ID, v_pyr_sp_employee, 
		    Cur_Deduction.pyr_deduction_id, Cur_Deduction.seqno);

	end loop;
    
    end loop;
    v_Message:=v_count||' Employee(s) created';
      IF(p_PInstance_ID IS NOT NULL) THEN
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
END PYR_GENERATESALARYPAYMENT
]]></body>
    </function>
  </database>
